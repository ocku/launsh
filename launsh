#!/bin/sh

set -eu

# constants #########################################################

home_dir="${XDG_CONFIG_HOME:-"$HOME"}"

[ -z "$home_dir" ] && {
	printf '%s\n' \
		'Launsh needs HOME or XDG_CONFIG_HOME to be set!' >&2
	exit 1
}

cache_dir="$home_dir/.cache/launsh"
cache_file="$cache_dir/cache"

# utils #############################################################

run() {
	# run '{cmd}'
	# run a command using our exec function

	swaymsg exec -- "$1"
}

is_cache_valid() (
	# is_cache_valid
	# indicates whether our cache contains the newest information

	[ -e "$cache_file" ] ||
		return 1

	# get the unix epoch of the cache file
	cache_file_epoch="$(stat -c'%Z' "$cache_file")"

	(
		# split the path by ":" and expand it into new lines
		IFS=':'
		# shellcheck disable=2086
		printf "%s\n" $PATH
	) |
		# read each directory and compare epochs with our cache_file's
		while read -r dir; do
			[ "$(stat -c'%Z' "$dir")" -gt "$cache_file_epoch" ] &&
				# if a directory's epoch is newer, invalidate
				return 1
		done
)

get_path_files() {
	# get_path_files
	# obtain the executable files to be listed, separated by new lines

	is_cache_valid && {
		cat "$cache_file"
		return 0
	}

	(
		# split the path by ":" and expand it into new lines
		IFS=':'
		# shellcheck disable=2086
		printf "%s\n" $PATH
	) |
		# find all the executable files in each directory
		xargs -I{} find '{}' -maxdepth 1 -type f -executable |
		# remove the base directory and leave only the file names
		awk -F/ '{print $NF}' 2>/dev/null |
		# make sure we don't get duplicates
		sort |
		uniq -u |
		# save results to our cache_file and print them
		tee "$cache_file"
}

# main ##############################################################

{
	[ -e "$cache_dir" ] || mkdir -p "$cache_dir"

	cmd="$(
		get_path_files |
			fzf \
				--preview 'which {}' \
				--layout reverse \
				--border none \
				--no-scrollbar
	)"

	[ -n "$cmd" ] && run "$cmd"
}
